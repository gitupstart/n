7) client code

import socket 
client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM) 
client_socket.connect(('127.0.0.1', 8080))  
client_socket.sendall(b"Hello, Server!") 
data = client_socket.recv(1024) 
print(f"Received from server: {data.decode()}") 
client_socket.close()

server code

import socket 
server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM) 
server_socket.bind(('127.0.0.1', 8080)) 
server_socket.listen(1) 
print("Server is listening on port 8080...")
conn, addr = server_socket.accept() 
print(f"Connected to client at {addr}") 
while True: 
/tab/data = conn.recv(1024) 
/tab/if not data: 
/tab/tab/break 
/tab/print(f"Received: {data.decode()}") 
/tab/conn.sendall(data)
conn.close()
server_socket.close()

8)client code
import socket 
client_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
server_address = ('127.0.0.1', 8080) 
message = "Hello, UDP Server!"
client_socket.sendto(message.encode(), server_address) 
print(f"Sent message to server: {message}") 
data, _ = client_socket.recvfrom(1024) # Buffer size is 1024 bytes 
print(f"Received from server: {data.decode()}") 
client_socket.close()

server code
import socket 
server_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) 
server_socket.bind(('127.0.0.1', 8080)) 
print("UDP server is up and listening on port 8080...") 
while True:
/tab/data, client_address = server_socket.recvfrom(1024) # Buffer size is 1024 bytes 
/tab/print(f"Received message from client: {data.decode()}") 
server_socket.sendto(data, client_address) 
print(f"Echoed back to {client_address}")